version: 2.1
jobs:
  build:
    docker:
      - image: cimg/python:3.8.5
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements/common.txt" }}-{{ checksum "requirements/Development.txt" }}
            - v1-dependencies-
      - run:
          name: Install Flask dependencies w/pylint
          command: |
            make setup
            . ~/.cex-api/bin/activate
            make install-dev
      - save_cache:
          paths: ["~/.cex-api"]
          key: v1-dependencies-{{ checksum "requirements/common.txt" }}-{{ checksum "requirements/Development.txt" }}
      - run:
          name: Install Hadolint
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.5.0/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
      - run:
          name: Run linters
          command: |
            . ~/.cex-api/bin/activate
            make lint
  deploy-docker-image:
    docker:
      - image: cimg/node:12.22.1
        auth:
          username: chrisk14
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.6
      - run:
          name: Build and run docker image in detached mode
          command: |
            chmod +x run_docker.sh
            ./run_docker.sh
      - run:
          name: Test that Docker container is up and running
          command: |
            if docker exec $(cat container_id.log) curl --retry 10 --retry-connrefused http://localhost:5000 | grep -s "PRODUCTION"
            then
              echo "Dockerized Flask app is up and running!"
            else
              echo "ERROR: Docker app is down! Exiting..."
              exit 1
            fi
      - run:
          name: Upload Docker image to DockerHub
          command: |
            chmod +x upload_docker.sh
            ./upload_docker.sh           
workflows:
  default:
    jobs:
      - build
      - deploy-docker-image:
          requires: [build]
