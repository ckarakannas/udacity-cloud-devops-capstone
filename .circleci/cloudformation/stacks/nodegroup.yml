---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Udacity Capstone Project - EKS Managed EC2 Nodegroup Stack
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: UdacityCapstone
Resources:
  NodesLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            Iops: 3000
            Throughput: 125
            VolumeSize: 20
            VolumeType: gp3
        MetadataOptions:
          HttpPutResponseHopLimit: 2
        SecurityGroupIds:
        - Fn::ImportValue: 
            !Sub "${EnvironmentName}-SharedNodeSecurityGroup"
        - !Ref NodeSecurityGroup
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: udacity-cluster-ng-3bc95ec6-Node
          - Key: alpha.eksctl.io/nodegroup-name
            Value: ng-3bc95ec6
          - Key: alpha.eksctl.io/nodegroup-type
            Value: managed
        - ResourceType: volume
          Tags:
          - Key: Name
            Value: udacity-cluster-ng-3bc95ec6-Node
          - Key: alpha.eksctl.io/nodegroup-name
            Value: ng-3bc95ec6
          - Key: alpha.eksctl.io/nodegroup-type
            Value: managed
        - ResourceType: network-interface
          Tags:
          - Key: Name
            Value: udacity-cluster-ng-3bc95ec6-Node
          - Key: alpha.eksctl.io/nodegroup-name
            Value: ng-3bc95ec6
          - Key: alpha.eksctl.io/nodegroup-type
            Value: managed
      LaunchTemplateName:
        Fn::Sub: "${AWS::StackName}"
  ManagedNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      AmiType: AL2_x86_64
      ClusterName: udacity-cluster
      InstanceTypes:
      - t3.medium
      Labels:
        alpha.eksctl.io/cluster-name: udacity-cluster
        alpha.eksctl.io/nodegroup-name: ng-3bc95ec6
      LaunchTemplate:
        Id:
          Ref: NodesLaunchTemplate
      NodeRole:
        Fn::GetAtt:
        - NodeInstanceRole
        - Arn
      NodegroupName: ng-3bc95ec6
      ScalingConfig:
        DesiredSize: 2
        MaxSize: 2
        MinSize: 2
      Subnets:
        Fn::Split:
        - ","
        - Fn::ImportValue: 
            !Sub ${EnvironmentName}-Public-NETS
      Tags:
        alpha.eksctl.io/nodegroup-name: ng-3bc95ec6
        alpha.eksctl.io/nodegroup-type: managed
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
      Path: "/"
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-NodeInstanceRole"
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: "${AWS::StackName}-remoteAccess"
      GroupDescription: Rules to allow ingress and egress traffic from Nodes
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-WebAppSecurityGroup"
